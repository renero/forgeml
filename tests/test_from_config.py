# Generated by CodiumAI
from mlforge.mlforge import Pipeline, Stage

from examples.example1 import SampleClass, HostClass


# pylint: disable=missing-function-docstring
# pylint: disable=W0212:protected-access


class Test_ProcessConfig:
    """
    Test the method `Pipeline._process_config()`.
    """

    config = {
        'step1': {
            'method': 'method_name',
            'class': 'SampleClass',
        },
        'step2': {
            'attribute': 'object',
            'class': 'SampleClass',
        },
        'step3': {
            'attribute': 'result1',
            'method': 'method',
            'class': 'SampleClass',
            'arguments': {
                'param2': 'there!'
            }
        },
        'step4': {
            'method': 'host_method'
        },
        'step5': {
            'method': 'host_method',
            'arguments': {
                'param1': 'Hello',
                'param2': 'there'
            }
        }
    }

    # Method receives a valid YAML configuration dictionary.
    def test_valid_config(self):
        """
        Test the method `Pipeline._process_config()` when it receives a valid
        configuration dictionary.
        """
        host = HostClass()
        pipeline = Pipeline(host, verbose=True, prog_bar=False)
        steps = pipeline._process_config(self.config)

        assert isinstance(steps, list)
        assert len(steps) == 5
        assert isinstance(steps[0], Stage)
        assert steps[0].attribute_name is None
        assert steps[0].method_name == 'method_name'
        assert steps[0].class_name == SampleClass
        assert steps[0].arguments is None

        assert isinstance(steps[1], Stage)
        assert steps[1].attribute_name == 'object'
        assert steps[1].method_name is None
        assert steps[1].class_name == SampleClass
        assert steps[1].arguments is None

        assert isinstance(steps[2], Stage)
        assert steps[2].attribute_name == 'result1'
        assert steps[2].method_name == 'method'
        assert steps[2].class_name == SampleClass
        assert steps[2].arguments == {'param2': 'there!'}

        assert isinstance(steps[3], Stage)
        assert steps[3].attribute_name is None
        assert steps[3].method_name == 'host_method'
        assert steps[3].class_name is None
        assert steps[3].arguments is None

        assert isinstance(steps[4], Stage)
        assert steps[4].attribute_name is None
        assert steps[4].method_name == 'host_method'
        assert steps[4].class_name is None
        assert steps[4].arguments == {'param1': 'Hello', 'param2': 'there'}

    # Method receives an empty dictionary as input.

    def test_empty_config(self):
        """
        Test the method `Pipeline._process_config()` when it receives an empty
        """
        empty_config = {}

        pipeline = Pipeline()
        steps = pipeline._process_config(empty_config)

        assert isinstance(steps, list)
        assert len(steps) == 0
